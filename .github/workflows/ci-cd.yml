name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Check if TypeScript files exist
        id: check-ts-files
        run: |
          if find . -type f -name "*.ts" -o -name "*.tsx" | grep -q .; then
            echo "TS_FILES_EXIST=true" >> $GITHUB_ENV
          else
            echo "TS_FILES_EXIST=false" >> $GITHUB_ENV
            echo "No TypeScript files found. Skipping lint."
          fi
      - name: Lint
        if: env.TS_FILES_EXIST == 'true'
        run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Check if frontend package.json exists
        id: check-frontend
        run: |
          if [ -f "packages/frontend/package.json" ]; then
            echo "FRONTEND_EXISTS=true" >> $GITHUB_ENV
          else
            echo "FRONTEND_EXISTS=false" >> $GITHUB_ENV
            echo "Frontend package.json not found. Skipping frontend build."
          fi
      - name: Check if backend package.json exists
        id: check-backend
        run: |
          if [ -f "packages/backend/package.json" ]; then
            echo "BACKEND_EXISTS=true" >> $GITHUB_ENV
          else
            echo "BACKEND_EXISTS=false" >> $GITHUB_ENV
            echo "Backend package.json not found. Skipping backend build."
          fi
      - name: Build Frontend
        if: env.FRONTEND_EXISTS == 'true'
        run: npm run build:frontend
      - name: Build Backend
        if: env.BACKEND_EXISTS == 'true'
        run: npm run build:backend
      - name: Upload build artifacts
        if: env.FRONTEND_EXISTS == 'true' || env.BACKEND_EXISTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/frontend/dist
            packages/backend/dist

  # 一時的にテストは無効化
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Test
  #       run: npm run test

  # デプロイはコードベースが整ってから有効化
  # deploy:
  #   name: Deploy to Cloudflare
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main' && secrets.CLOUDFLARE_API_TOKEN != ''
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #     - name: Install Wrangler
  #       run: npm install -g wrangler
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts
      
  #     # Cloudflare Pagesへのデプロイ
  #     - name: Deploy Frontend to Cloudflare Pages
  #       run: wrangler pages deploy packages/frontend/dist --project-name=pokemon-browser-game
  #       env:
  #         CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  #         CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
  #     # Cloudflare Workersへのデプロイ
  #     - name: Deploy Backend to Cloudflare Workers
  #       run: cd packages/backend && wrangler deploy
  #       env:
  #         CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  #         CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
